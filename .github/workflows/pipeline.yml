name: CI/CD

on:
  push:
    branches:
      - '*'
  workflow_call:

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.1
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
      - name: Run tests
        run: pytest
      - name: Run linter
        run: flake8
      - name: Generate coverage report
        run: |
          coverage run --source=lettings,oc_lettings_site,profiles --omit=tests/* -m pytest
          coverage report -m --fail-under=80
      - name: Publish coverage
        run: echo "Publish coverage results here"

  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_test_lint

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $DOCKERHUB_EMAIL --password-stdin
      - name: Build, tag, push, pull, and run Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings
        run: |
          docker build . --file Dockerfile --tag $DOCKER_REPO:$IMAGE_TAG
          docker push $DOCKER_REPO:$IMAGE_TAG
          docker pull $DOCKER_REPO:$IMAGE_TAG
          docker run -d -p 8080:80 $DOCKER_REPO:$IMAGE_TAG

  deploy_to_render:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy_docker_image
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Install jq
        run: sudo apt-get install -y jq
  
      - name: Get Render URL
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_NAME: oc-lettings-deploy-${{ github.sha }}
        run: |
          RENDER_SERVICE_INFO=$(curl -X GET \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_NAME")
          RENDER_SERVICE_URL=$(echo $RENDER_SERVICE_INFO | jq -r '.service.url')
          echo "Render Service URL: $RENDER_SERVICE_URL"
          echo "DJANGO_ALLOWED_HOSTS=$RENDER_SERVICE_URL" >> $GITHUB_ENV

      - name: Login to Render
        env:
            RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
            curl -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              https://api.render.com/v1/login
    
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_OWNER_ID: ${{ secrets.DOCKERHUB_EMAIL }}
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings:${{ github.sha }}
          SERVICE_NAME: oc-lettings-deploy-${{ github.sha }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          echo "Creating new service on Render"
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceDetails": {
                "name": "'"$SERVICE_NAME"'",
                "type": "web",
                "env": "docker",
                "repo": null,
                "branch": null,
                "autoDeploy": true,
                "dockerfilePath": "Dockerfile",
                "buildCommand": "docker build -t '"$DOCKER_IMAGE"' .",
                "startCommand": "docker run -p 8000:8000 '"$DOCKER_IMAGE"'",
                "ownerID": "'"$RENDER_OWNER_ID"'"
              },
              "env": {
                "DJANGO_ALLOWED_HOSTS": "'"$RENDER_SERVICE_URL"'",
                "SENTRY_DSN": "'"$SENTRY_DSN"'"
              },
              "region": "frankfurt",
              "planId": "render.com/freetier"
            }' \
            https://api.render.com/v1/services
