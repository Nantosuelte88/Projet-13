name: CI/CD

on:
  push:
    branches:
      - '*'
  workflow_call:

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.1
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
      - name: Run tests
        run: pytest
      - name: Run linter
        run: flake8
      - name: Generate coverage report
        run: |
          coverage run --source=lettings,oc_lettings_site,profiles --omit=tests/* -m pytest
          coverage report -m --fail-under=80
      - name: Publish coverage
        run: echo "Publish coverage results here"
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_test_lint

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $DOCKERHUB_EMAIL --password-stdin
      - name: Build Docker image
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-oc-lettings
        run: |
          docker build . --file Dockerfile --tag $DOCKER_REPO:$IMAGE_TAG --build-arg SECRET_KEY=$SECRET_KEY
      - name: Push Docker image
        env:
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-oc-lettings
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $DOCKER_REPO:$IMAGE_TAG
      - name: Run Docker container
        env:
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-oc-lettings
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull $DOCKER_REPO:$IMAGE_TAG
          docker run -d -p 8080:80 $DOCKER_REPO:$IMAGE_TAG

  deploy_to_render:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy_docker_image

    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Get Render Service ID
        id: get_service_id
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_NAME: ${{ secrets.RENDER_SERVICE_NAME }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services)
          
          # Extract the service ID
          SERVICE_ID=$(echo $response | jq -r --arg NAME "$RENDER_SERVICE_NAME" '.[] | select(.service.name==$NAME) | .service.id')
          
          # Check if SERVICE_ID is empty
          if [ -z "$SERVICE_ID" ]; then
            echo "Service ID not found!"
            exit 1
          fi
          
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
      - name: Debug Print SERVICE_ID
        run: echo "SERVICE_ID=${{ env.SERVICE_ID }}"
      - name: Debug Print IMAGE_TAG
        run: echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
  
      - name: Debug Print FULL_IMAGE_NAME
        run: echo "FULL_IMAGE_NAME=${{ env.FULL_IMAGE_NAME }}"
  
      - name: Wait for 30 seconds
        run: sleep 30
  
      - name: Get Owner ID
        id: get_owner_id
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Fetching owner ID"
          OWNER_RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/owners)
          echo "API Response: $OWNER_RESPONSE"
          OWNER_ID=$(echo $OWNER_RESPONSE | jq -r '.[0].owner.id')
          if [ -z "$OWNER_ID" ] || [ "$OWNER_ID" == "null" ]; then
            echo "Owner ID not found!"
            exit 1
          fi
          echo "OWNER_ID=$OWNER_ID" >> $GITHUB_ENV
  
      - name: Debug Print OWNER_ID
        run: echo "OWNER_ID=${{ env.OWNER_ID }}"
  
      - name: Pre-Deployment Check
        env:
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
          OWNER_ID: ${{ env.OWNER_ID }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          if [ -z "$SERVICE_ID" ] || [ -z "$OWNER_ID" ] || [ -z "$IMAGE_TAG" ]; then
            echo "One of the required variables is not set. Exiting."
            exit 1
          fi
  
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
          FULL_IMAGE_NAME: ${{ env.FULL_IMAGE_NAME }}
        run: |
          echo "Deploying image: $FULL_IMAGE_NAME"
          DEPLOY_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceId": "'"$SERVICE_ID"'",
              "imagePath": "'"$FULL_IMAGE_NAME"'"
            }' \
            https://api.render.com/v1/services/$SERVICE_ID/deploys)
          echo "Deployment response: $DEPLOY_RESPONSE"
  
      - name: Check Render Deployment Status
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
          OWNER_ID: ${{ env.OWNER_ID }}
        run: |
          sleep 30
          response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services/$SERVICE_ID)
          echo "API response: $response"
          deploy_status=$(echo $response | jq -r '.status')
          updated_at=$(echo $response | jq -r '.updatedAt')
          echo "Render service deployment status: $deploy_status"
          echo "Render service updated at: $updated_at"
          if [ -z "$deploy_status" ] || [ "$deploy_status" == "null" ]; then
            echo "Deployment status is not available!"
            exit 1
          fi
          if [ "$deploy_status" != "live" ]; then
            echo "Deployment did not succeed!"
            exit 1
          fi
