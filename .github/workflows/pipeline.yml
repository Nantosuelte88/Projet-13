name: CI/CD

on:
  push:
    branches:
      - '*'
  workflow_call:

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.1
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
      - name: Run tests
        run: pytest
      - name: Run linter
        run: flake8
      - name: Generate coverage report
        run: |
          coverage run --source=lettings,oc_lettings_site,profiles --omit=tests/* -m pytest
          coverage report -m --fail-under=80
      - name: Publish coverage
        run: echo "Publish coverage results here"

  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_test_lint

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $DOCKERHUB_EMAIL --password-stdin
      - name: Build, tag, push, pull, and run Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings
        run: |
          docker build . --file Dockerfile --tag $DOCKER_REPO:$IMAGE_TAG
          docker push $DOCKER_REPO:$IMAGE_TAG
          docker pull $DOCKER_REPO:$IMAGE_TAG
          docker run -d -p 8080:80 $DOCKER_REPO:$IMAGE_TAG

  create_and_deploy_render_service:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy_docker_image

    steps:
      - name: Install requests library
        run: pip install requests
      - name: Create and Deploy Render Service
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings
        run: |
          python - <<EOF
          import os
          import requests
          import json

          API_URL = "https://api.render.com/v1/services"
          headers = {
              "Authorization": f"Bearer {os.getenv('RENDER_API_KEY')}",
              "Content-Type": "application/json"
          }

          service_data = {
              "name": "my-service",
              "type": "web_service",
              "env": "docker",
              "region": "eu-central",
              "serviceDetails": {
                  "plan": "starter"
              },
              "docker": {
                  "image": f"{os.getenv('DOCKER_REPO')}:{os.getenv('IMAGE_TAG')}",
                  "command": "python manage.py runserver 0.0.0.0:8000"
              }
          }

          response = requests.post(API_URL, headers=headers, data=json.dumps(service_data))
          if response.status_code == 201:
              service_id = response.json()["id"]
              print(f"Service created with ID: {service_id}")

              # Déclencher le déploiement
              deploy_url = f"{API_URL}/{service_id}/deploys"
              deploy_response = requests.post(deploy_url, headers=headers)
              if deploy_response.status_code == 201:
                  print("Deployment triggered successfully.")
              else:
                  print(f"Error triggering deployment: {deploy_response.text}")
          else:
              print(f"Error creating service: {response.text}")
          EOF
