name: CI/CD

on:
  push:
    branches:
      - '*'
  workflow_call:

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.1
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
      - name: Run tests
        run: pytest
      - name: Run linter
        run: flake8
      - name: Generate coverage report
        run: |
          coverage run --source=lettings,oc_lettings_site,profiles --omit=tests/* -m pytest
          coverage report -m --fail-under=80
      - name: Publish coverage
        run: echo "Publish coverage results here"

  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_test_lint

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $DOCKERHUB_EMAIL --password-stdin
      - name: Build, tag, push, pull, and run Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings
        run: |
          docker build . --file Dockerfile --tag $DOCKER_REPO:$IMAGE_TAG
          docker push $DOCKER_REPO:$IMAGE_TAG
          docker pull $DOCKER_REPO:$IMAGE_TAG
          docker run -d -p 8080:80 $DOCKER_REPO:$IMAGE_TAG

  deploy_to_render:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy_docker_image

    steps:
    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Get Owner ID
      id: get_owner_id
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        echo "Fetching owner ID"
        OWNER_RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/owners)
        OWNER_ID=$(echo $OWNER_RESPONSE | jq -r '.[0].owner.id')
        echo "OWNER_ID=$OWNER_ID" >> $GITHUB_ENV

    - name: Generate Service Name if Not Provided
      id: generate_service_name
      run: |
        if [ -z "${{ secrets.RENDER_SERVICE_NAME }}" ]; then
          GENERATED_SERVICE_NAME="service-$(date +%s)"
          echo "RENDER_SERVICE_NAME=$GENERATED_SERVICE_NAME" >> $GITHUB_ENV
        else
          echo "RENDER_SERVICE_NAME=${{ secrets.RENDER_SERVICE_NAME }}" >> $GITHUB_ENV
        fi

    - name: Get Service ID
      id: get_service_id
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_NAME: ${{ env.RENDER_SERVICE_NAME }}
      run: |
        echo "Fetching service ID for service name: $RENDER_SERVICE_NAME"
        RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services)
        SERVICE_ID=$(echo $RESPONSE | jq -r --arg NAME "$RENDER_SERVICE_NAME" '.[] | select(.service.name == $NAME) | .service.id')
        if [ -z "$SERVICE_ID" ]; then
          echo "No matching service found."
        else
          echo "Found Service ID: $SERVICE_ID"
        fi
        echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV

    - name: Create or Update Render Service
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings
        RENDER_SERVICE_NAME: ${{ env.RENDER_SERVICE_NAME }}
        OWNER_ID: ${{ env.OWNER_ID }}
      run: |
        if [ -z "$SERVICE_ID" ]; then
          echo "Creating new service: $RENDER_SERVICE_NAME"
          JSON_DATA=$(cat <<EOF
        {
        "service": {
          "name": "$RENDER_SERVICE_NAME",
          "type": "web_service",
          "env": "docker",
          "region": "oregon",
          "repo": "$DOCKER_REPO:$IMAGE_TAG",
          "branch": "main",
          "ownerId": "$OWNER_ID"
        }
        }
        EOF
        )
          echo "JSON Data: $JSON_DATA"
          RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $RENDER_API_KEY" -H "Content-Type: application/json" -d "$JSON_DATA" https://api.render.com/v1/services)
          echo "Create Service Response: $RESPONSE"
          SERVICE_ID=$(echo $RESPONSE | jq -r '.service.id')
          if [ -z "$SERVICE_ID" ]; then
            echo "Failed to create service."
            exit 1
          else
            echo "Created Service ID: $SERVICE_ID"
          fi
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
        else
          echo "Updating existing service with ID: $SERVICE_ID"
          RESPONSE=$(curl -s -X PATCH -H "Authorization: Bearer $RENDER_API_KEY" -H "Content-Type: application/json" -d '{
            "service": {
              "repo": "'"$DOCKER_REPO:$IMAGE_TAG"'"
            }
          }' https://api.render.com/v1/services/$SERVICE_ID)
          echo "Update Service Response: $RESPONSE"
        fi

    - name: Deploy to Render
      if: env.SERVICE_ID != ''
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        SERVICE_ID: ${{ env.SERVICE_ID }}
      run: |
        echo "Deploying service with ID: $SERVICE_ID"
        RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services/$SERVICE_ID/deploys)
        echo "Deploy Response: $RESPONSE"
