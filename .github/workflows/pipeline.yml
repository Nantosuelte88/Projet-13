name: CI/CD

on:
  push:
    branches:
      - '*'
  workflow_call:

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.1
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
      - name: Run tests
        run: pytest
      - name: Run linter
        run: flake8
      - name: Generate coverage report
        run: |
          coverage run --source=lettings,oc_lettings_site,profiles --omit=tests/* -m pytest
          coverage report -m --fail-under=80
      - name: Publish coverage
        run: echo "Publish coverage results here"

  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_test_lint

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $DOCKERHUB_EMAIL --password-stdin
      - name: Build, tag, push, pull, and run Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-oc-lettings
        run: |
          docker build . --file Dockerfile --tag $DOCKER_REPO:$IMAGE_TAG
          docker push $DOCKER_REPO:$IMAGE_TAG
          docker pull $DOCKER_REPO:$IMAGE_TAG
          docker run -d -p 8080:80 $DOCKER_REPO:$IMAGE_TAG

  deploy_to_render:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy_docker_image

    steps:
      - uses: actions/checkout@v4
      - name: Get Render Service ID and Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_NAME: ${{ secrets.RENDER_SERVICE_NAME }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-oc-lettings
          IMAGE_TAG: ${{ github.sha }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services)
          SERVICE_ID=$(echo $response | jq -r --arg NAME "$RENDER_SERVICE_NAME" '.[] | select(.serviceName==$NAME) | .id')
          if [ -z "$SERVICE_ID" ]; then
            echo "Service ID not found!"
            exit 1
          fi
          echo "Found Service ID: $SERVICE_ID"
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "serviceId": "'"$SERVICE_ID"'",
              "image": "'"$DOCKER_REPO:$IMAGE_TAG"'"
            }' \
            https://api.render.com/v1/services/$SERVICE_ID/deploys

