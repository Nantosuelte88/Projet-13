name: CI/CD

on:
  push:
    branches:
      - '*'
  workflow_call:

jobs:
  build_test_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12.1
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt
      - name: Run tests
        run: pytest
      - name: Run linter
        run: flake8
      - name: Generate coverage report
        run: |
          coverage run --source=lettings,oc_lettings_site,profiles --omit=tests/* -m pytest
          coverage report -m --fail-under=80
      - name: Publish coverage
        run: echo "Publish coverage results here"

  build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_test_lint

    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_EMAIL: ${{ secrets.DOCKERHUB_EMAIL }}
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u $DOCKERHUB_EMAIL --password-stdin
      - name: Build, tag, push, pull, and run Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings
        run: |
          docker build . --file Dockerfile --tag $DOCKER_REPO:$IMAGE_TAG
          docker push $DOCKER_REPO:$IMAGE_TAG
          docker pull $DOCKER_REPO:$IMAGE_TAG
          docker run -d -p 8080:80 $DOCKER_REPO:$IMAGE_TAG

  deploy_to_render:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_deploy_docker_image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get Render Owner ID
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          RESPONSE=$(curl -s -X GET -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/owners)
          echo "Response: $RESPONSE"
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from Render API"
            exit 1
          fi
          OWNER_ID=$(echo "$RESPONSE" | jq -r '.[0].owner.id')
          echo "Extracted OWNER_ID: $OWNER_ID"
          if [ "$OWNER_ID" == "null" ] || [ -z "$OWNER_ID" ]; then
            echo "Error: ownerID not found in the response"
            echo "Response: $RESPONSE"
            exit 1
          fi
          echo "OWNER_ID=$OWNER_ID" >> $GITHUB_ENV

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/img-oc-lettings:${{ github.sha }}
          SERVICE_NAME: oc-lettings-deploy-${{ github.sha }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          OWNER_ID: ${{ env.OWNER_ID }}
        uses: renderapp/deploy-action@1.1.1
        with:
          renderToken: $RENDER_API_KEY
          dockerImage: $DOCKER_IMAGE
